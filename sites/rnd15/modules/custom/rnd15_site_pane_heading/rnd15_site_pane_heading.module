<?php
/**
 * @file
 * Module file for rnd15_site_pane_heading.
 *
 * Provide title header tag selection to fieldable panel panes
 * and a field for attaching custom css classes
 *
 * @author Orizu Nwokeji o.nwokeji@comicrelief.com
 */

define('CR_FIELDABLE_PANELS_FORM',
'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form');
define('CR_FIELDABLE_PANE_ENTITY_FORM',
'fieldable_panels_panes_entity_edit_form');

/**
 * Implementation of hook_form_ID_alter()
 * Override fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form
 * to add form fields for header tag selection and custom css classes.
 *
 * Used in preference to hook_form_alter to avoid being called redundantly
 */
function rnd15_site_pane_heading_form_fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form_alter (&$form, &$form_state, $form_id) {
  rnd15_site_pane_heading_form_modify ($form, $form_state, $form_id);
}

/**
 * Implementation of hook_form_ID_alter()
 * Used for slight performance optimisation
 * once more and maybe they go into a form_alter
 */
function rnd15_site_pane_heading_form_fieldable_panels_panes_entity_edit_form_alter (&$form, &$form_state, $form_id) {
  rnd15_site_pane_heading_form_modify ($form, $form_state, $form_id);
}

/**
 * Return styles settings for fieldable_panels_pane entity if previously saved.
 * @param $entity
 * @return array $style
 */
function rnd15_site_pane_heading_get_entity_styles($entity) {
  $style = FALSE;
  $fpid_arg = sprintf('fpid:%d', $entity->fpid);
  $query = db_select('panels_pane', 'pp');
  $query->condition('pp.type', 'fieldable_panels_pane', '=')
    ->condition('pp.subtype', $fpid_arg, '=')
    ->fields('pp', array('pid', 'did', 'style'))
    ->range(0,1);
  $result = $query->execute();
  $record = $result->fetchAssoc();

  if (is_array($record)) {
    $style_str = $record['style'];
    $style = unserialize($style_str);
  }

  return $style;
}

/**
 * Save pane styles for a fieldable_panels_pane entity.
 * @param array $style_settings
 * @param Entity $entity
 */
function rnd15_site_pane_heading_set_entity_styles_settings($style_settings, $entity) {

  // Update settings for existing pane entity.
  if (!empty($entity)) {

    // Get styles from panels_pane settings and set defaults if none found.
    $styles = rnd15_site_pane_heading_get_entity_styles($entity);

    if(!$styles) {
      $styles = rnd15_site_pane_heading_get_default_pane_styles();
    }

    $settings = &$styles['settings'];
    $settings = array_merge($settings, $style_settings);

    // Creating a fieldable_panels_pane via entity form does not create
    // an entry in the panels_pane table (required for storing the pane style)
    // in this case we do so with sensible defaults.

    $styles_str = serialize($styles);
    $config_default = serialize(array('view_mode' => 'full'));
    $access_default = serialize(array());

    $fpid_arg = sprintf('fpid:%d', $entity->fpid);

    $update = db_merge('panels_pane')
      ->key(array('subtype' => $fpid_arg))
      ->insertFields(array(
        'type' => 'fieldable_panels_pane',
        'subtype' => $fpid_arg,
        'configuration' => $config_default,
        'access' => $access_default,
        'style' => $styles_str,
      ))
      ->updateFields(array('style' => $styles_str));
    $update->execute();
  }
}

/**
 * Retrieve default panels pane style settings.
 * @return array
 */
function rnd15_site_pane_heading_get_default_pane_styles(){
  return array(
    'style' => 'pane',
    'settings' => array(
      'use_columns' => 1,
      'columns' => array(
        'xs' => 'col_xs_12',
      ),
      'use_offset' => 0,
      'use_push' => 0,
      'use_pull' => 0,
    ),
  );
}

/**
 * Actual modification of the fieldable_panels_pane edit forms
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function rnd15_site_pane_heading_form_modify(&$form, &$form_state, $form_id) {

  // CTools dependency is used for consistency with pre-existing form elements
  ctools_include('dependent');
  ctools_add_js('dependent');

  $entity = $form_state['entity'];
  if (!in_array($entity->bundle, array('text'))) {
    return;
  }

  // Different methods for retrieving pane styles
  // due to the different context of their forms.
  switch ($form_id){
    case CR_FIELDABLE_PANE_ENTITY_FORM:
      $style_settings = array();
      if (!isset($entity->fpid)) {
        break;
      }
      $style = rnd15_site_pane_heading_get_entity_styles($entity);

      if ($style && is_array($style['settings'])) {
        $style_settings = $style['settings'];
      }
      break;
    case CR_FIELDABLE_PANELS_FORM:
      $style_settings = &$form_state['pane']->style['settings'];
      break;
  }

  // Set default or existing values.
  $header_tag = !empty($style_settings['header_tag']) ?
    $style_settings['header_tag'] : 'h2';

  $header_styles = !empty($style_settings['header_styles']) ?
    $style_settings['header_styles'] : '';

  if (!empty($style_settings['header_settings_active']) &&
    $style_settings['header_settings_active']) {
    $header_settings_active = 1;
  } else {
    $header_settings_active = 0;
  }

  // Container to support ctools dependency on header-settings-active
  $form['header_settings'] = array(
    '#weight' => -4,
  );

  $form['header_settings']['header-settings-active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Change the header appearance'),
    '#default_value' => $header_settings_active,
    '#id' => 'edit-header-settings',
    '#weight' => -6,
  );

  $form['header_settings']['header_styles'] = array(
    '#type' => 'textfield',
    '#title' => t('Header classes'),
    '#default_value' => $header_styles,
    '#description' => t('Enter custom classes to be applied to the pane title,'
      . ' styles will be reduced to lowercase - 120 characters max.'),
    '#size' => 80,
    '#maxlength' => 120,
    '#weight' => -5,
    '#dependency' => array('edit-header-settings' => array(1)),
  );

  $form['header_settings']['header_tag'] = array(
    '#type' => 'select',
    '#title' => t('Header tag'),
    '#options' => array('h1' => 'H1', 'h2' => 'H2', 'h3' => 'H3', 'h4' => 'H4',
      'h5' => 'H5', 'h6' => 'H6'),
    '#default_value' => $header_tag,
    '#description' => t('Select the heading element type - H1 to H6'),
    '#weight' => -5,
    '#dependency' => array('edit-header-settings' => array(1)),
  );

  // Custom submit handler to create new classes.
  $form['#validate'][]= 'rnd15_site_pane_heading_validate';
  $form['#submit'][]= 'rnd15_site_pane_heading_submit';
}

/**
 * Validation handler for pane title style settings.
 */
function rnd15_site_pane_heading_validate(&$form, &$form_state) {
  $active = $form_state['values']['header-settings-active'];
  if (!$active) {
    $form_state['values']['header_styles'] = '';
    $form_state['values']['header_tag'] = 'h2';
    return;
  }

  $message = t('Please only enter valid css classes. ' .
    'Refer to the site styleguide.');
  $header_styles = $form_state['values']['header_styles'];
  $styles = explode(' ', $header_styles);
  array_walk($styles, 'trim');

  // Source drupal_clean_css_identifier()
  // We return an error on any character not in the following list.
  // - a-z (U+0030 - U+0039), A-Z (U+0041 - U+005A)
  // - 0-9 (U+0061 - U+007A)
  // - the hyphen (U+002D), the underscore (U+005F)
  // - ISO 10646 characters U+00A1 and higher.

  $bad_css_pattern = '/[^\x{002D}\x{0030}-\x{0039}\x{0041}-\x{005A}\x{005F}' .
    '\x{0061}-\x{007A}\x{00A1}-\x{FFFF}]/u';

  foreach($styles as $style) {
    preg_match($bad_css_pattern, $style, $matches);
    if(!empty($matches)) {
      form_set_error('header_styles', $message);
      break;
    }
  }
}

/**
 * Submit handler to marshal form data before saving pane settings.
 */
function rnd15_site_pane_heading_submit(&$form, &$form_state) {
  $active = $form_state['values']['header-settings-active'];
  $pane = &$form_state['pane'];
  $style_settings = &$pane->style['settings'];

  // Header style defaults provide deletion of existing header style/tag.
  if (!$active) {
    $form_state['values']['header_styles'] = '';
    $form_state['values']['header_tag'] = 'h2';
  }

  $style_settings['header_tag'] = $form_state['values']['header_tag'];
  $style_settings['header_styles'] = $form_state['values']['header_styles'];
  $style_settings['header_settings_active'] = $active;

  if ($form['#form_id'] == CR_FIELDABLE_PANE_ENTITY_FORM){
    // There is an entity with an fpid whether updating or creating a pane.
    $entity = $form_state['entity'];
    rnd15_site_pane_heading_set_entity_styles_settings($style_settings, $entity);
  }
}

/**
 * Implementation of hook_preprocess_panels_pane()
 * Makes selected header tag and custom styles available to the panel pane
 * template file.
 * @param array $vars
 */
function rnd15_site_pane_heading_preprocess_panels_pane(array &$vars) {
  $style_settings = &$vars['pane']->style['settings'];

  if (!empty($style_settings['header_tag'])) {
    $vars['h_tag'] = $style_settings['header_tag'];
  }

  // Sanitise the styles for output
  if (!empty($style_settings['header_styles'])) {
    $styles = explode(' ', $style_settings['header_styles']);
    if ($styles) {
      array_walk($styles, 'drupal_html_class');
      $vars['title_attributes_array']['class'] = array_merge
      ($vars['title_attributes_array']['class'], $styles);
    }
  }
}